class PlayerMovement : ZilchComponent
{
    [Dependency]
    var RBody : RigidBody = null;
    
    [Property]
    var StepSize : Real = 1;
    var Destination : Real3 = Real3();
    var Dir : Integer2 = Integer2(0,0);
    var Walking : Boolean = false;
    
    [Property]
    var Speed : Real = 1;
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        if(Zero.Keyboard.KeyIsPressed(Keys.Tab))
        {
            Console.WriteLine("`this.Owner.Transform.Translation` `this.Destination` `this.Walking`");
        }
        
        if(!this.Walking)
        {
            this.Destination = this.Owner.Transform.Translation;
            if(Zero.Keyboard.KeyIsDown(Keys.W) || Zero.Keyboard.KeyIsDown(Keys.Up))
            {
                this.Destination += Real3(0,this.StepSize,0);
                this.RBody.Velocity += Real3(0,this.Speed,0);
                this.Dir.Y = 1;
                this.Walking = true;
            }
            else if(Zero.Keyboard.KeyIsDown(Keys.S) || Zero.Keyboard.KeyIsDown(Keys.Down))
            {
                this.Destination += Real3(0,-this.StepSize,0);
                this.RBody.Velocity += Real3(0,-this.Speed,0);
                this.Dir.Y = -1;
                this.Walking = true;
            }
            if(Zero.Keyboard.KeyIsDown(Keys.A) || Zero.Keyboard.KeyIsDown(Keys.Left))
            {
                this.Destination += Real3(-this.StepSize,0,0);
                this.RBody.Velocity += Real3(-this.Speed,0,0);
                this.Dir.X = -1;
                this.Walking = true;
            }
            else if(Zero.Keyboard.KeyIsDown(Keys.D) || Zero.Keyboard.KeyIsDown(Keys.Right))
            {
                this.Destination += Real3(this.StepSize,0,0);
                this.RBody.Velocity += Real3(this.Speed,0,0);
                this.Dir.X = 1;
                this.Walking = true;
            }
        }
        else
        {
            if(this.Dir.Y != 0)
            {
                if(this.Owner.Transform.Translation.Y*this.Dir.Y >= this.Destination.Y*this.Dir.Y)
                {
                    this.Stop();
                }
            }
            if(this.Dir.X != 0)
            {
                if(this.Owner.Transform.Translation.X*this.Dir.X >= this.Destination.X*this.Dir.X)
                {
                    this.Stop();
                }
            }
        }
    }
    
    function Stop()
    {
        this.Walking = false;
        this.Owner.Transform.Translation = this.Destination;
        this.Dir = Integer2(0,0);
        this.RBody.Velocity = Real3(0,0,0);
    }
}
