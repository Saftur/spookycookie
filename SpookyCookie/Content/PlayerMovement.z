// Authors: Charles duMars, Arthur Bouvier
// All content Â© 2017 DigiPen (USA) Corporation, all rights reserved.
class PlayerMovement : ZilchComponent
{
    [Dependency]
    var RBody : RigidBody = null;
    
    [Property]
    var StepSize : Real = 1;
    var Destination : Real3 = Real3();
    var Dir : Integer2 = Integer2(0,0);
    var Walking : Boolean = false;
    var Beam : Cog = null;
    var Sense : Cog = null;
    
    [Property]
    var Speed : Real = 1;
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        this.Beam = this.Owner.FindChildByName("Beam");
        this.Sense = this.Space.FindObjectByName("Sense");
    }
    function OnLogicUpdate(event : UpdateEvent)
    {
        if(Zero.Keyboard.KeyIsDown(Keys.Control) && Zero.Keyboard.KeyIsDown(Keys.G))
        {
            this.Space.LoadLevel(Level.Kitchen);
        }
        if(this.Owner.FearManager.Spooked)
            return;
        
        if(!this.Walking)
        {
            this.Destination = this.Owner.Transform.Translation;
            
            if(Zero.Keyboard.KeyIsDown(Keys.A) || Zero.Keyboard.KeyIsDown(Keys.Left))
            {
                this.Sense.Transform.SetEulerAnglesXYZ(0,0, Math.Pi);
                this.Sense.FollowObject.Displacement = Real3(0,0.1,-0.1);
                this.Destination += Real3(-this.StepSize,0,0);
                this.RBody.Velocity += Real3(-this.Speed,0,0);
                this.Dir.X = -1;
                if(this.Owner.Sprite.SpriteSource != SpriteSource.Character_Left_Side)
                    this.Owner.Sprite.SpriteSource = SpriteSource.Character_Left_Side;
                this.Walking = true;
            }
            else if(Zero.Keyboard.KeyIsDown(Keys.D) || Zero.Keyboard.KeyIsDown(Keys.Right))
            {
                this.Sense.Transform.SetEulerAnglesXYZ(0,0,0);
                this.Sense.FollowObject.Displacement = Real3(0,-0.5,-0.1);
                this.Destination += Real3(this.StepSize,0,0);
                this.RBody.Velocity += Real3(this.Speed,0,0);
                this.Dir.X = 1;
                if(this.Owner.Sprite.SpriteSource != SpriteSource.Character_Right_Side_1)
                    this.Owner.Sprite.SpriteSource = SpriteSource.Character_Right_Side_1;
                this.Walking = true;
            }
            if(Zero.Keyboard.KeyIsDown(Keys.W) || Zero.Keyboard.KeyIsDown(Keys.Up))
            {
                this.Sense.Transform.SetEulerAnglesXYZ(0,0, Math.Pi/2);
                this.Sense.FollowObject.Displacement = Real3(0.3,0,-0.1);
                this.Destination += Real3(0,this.StepSize,0);
                this.RBody.Velocity += Real3(0,this.Speed,0);
                this.Dir.Y = 1;
                if(this.Dir.X == 0 && this.Owner.Sprite.SpriteSource != SpriteSource.Character_Up)
                    this.Owner.Sprite.SpriteSource = SpriteSource.Character_Up;
                this.Walking = true;
            }
            else if(Zero.Keyboard.KeyIsDown(Keys.S) || Zero.Keyboard.KeyIsDown(Keys.Down))
            {
                this.Sense.Transform.SetEulerAnglesXYZ(0,0, 3*Math.Pi/2);
                this.Sense.FollowObject.Displacement = Real3(-0.3,0,-0.1);
                this.Destination += Real3(0,-this.StepSize,0);
                this.RBody.Velocity += Real3(0,-this.Speed,0);
                this.Dir.Y = -1;
                if(this.Dir.X == 0 &&this.Owner.Sprite.SpriteSource != SpriteSource.Character_Front_2)
                    this.Owner.Sprite.SpriteSource = SpriteSource.Character_Front_2;
                this.Walking = true;
            }
            if(this.Dir == Integer2(0,0))
            {
                this.Owner.Sprite.CurrentFrame = 0;
                this.Owner.Sprite.AnimationActive = false;
            }
            else
            {
                
                var ray = Ray();
                ray.Start = this.Owner.Transform.Translation;
                ray.Direction = Real3(this.Dir,0);
                var result = this.Space.PhysicsSpace.CastRayFirst(ray);
                
                if(result.Distance < 1)
                {
                    this.Destination = this.Owner.Transform.Translation;
                    this.ShrinkBeam();
                    this.Stop();
                }
                
                this.Owner.Sprite.AnimationActive = true;
            }
        }
        else
        {
            if(this.Dir.Y != 0)
            {
                if(this.Owner.Transform.Translation.Y*this.Dir.Y >= this.Destination.Y*this.Dir.Y)
                {
                    this.Stop();
                }
            }
            if(this.Dir.X != 0)
            {
                if(this.Owner.Transform.Translation.X*this.Dir.X >= this.Destination.X*this.Dir.X)
                {
                    this.Stop();
                }
            }
        }
        
        //Beam Shrinking
        this.ShrinkBeam();
        
        
    }
    function ShrinkBeam()
    {
        var len = 5.0;
        var ray = Ray();
        ray.Start = this.Owner.Transform.Translation;
        ray.Direction = Real3(this.Dir, 0);
        var result2 = this.Space.PhysicsSpace.CastRayFirst(ray);
        if(result2.Distance < len)
        {
            len = result2.Distance;
        }
        //Diagonal
        if ((this.Dir.X != 0) && (this.Dir.Y != 0))
        {
            this.Beam.Transform.Scale = Real3(len, 1, 1);
            this.Beam.Transform.Translation = Real3(Real2(Math.Sqrt(len*len/2)/2 + 0.5,Math.Sqrt(len*len/2)/2 + 0.5) * this.Dir, 0);
            
            var angle = Math.Pi/4;
            if(this.Dir.X < 0)
                angle += Math.Pi/2;
            this.Beam.Transform.SetEulerAnglesXYZ(0,0,angle*this.Dir.Y);
        }
        else if((this.Dir.X != 0) || (this.Dir.Y != 0))
        {
            var ss = this.Owner.Sprite.SpriteSource;
            if((ss == SpriteSource.Character_Left_Side) || (ss == SpriteSource.Character_Right_Side_1))
            {
                this.Beam.Transform.Scale = Real3(len, 1, 1);
                this.Beam.Transform.Translation = Real3((0.5 + len/2)*this.Dir.X, 0, 0);
                this.Beam.Transform.SetEulerAnglesXYZ(0,0,0);
            }
            else if((ss == SpriteSource.Character_Up) || (ss == SpriteSource.Character_Front_2))
            {
                this.Beam.Transform.Scale = Real3(1, len, 1);
                this.Beam.Transform.Translation = Real3(0, (0.5 + len/2)*this.Dir.Y, 0);
                this.Beam.Transform.SetEulerAnglesXYZ(0,0,0);
            }
        }
    }
    function Stop()
    {
        this.Walking = false;
        this.Owner.Transform.Translation = this.Destination;
        this.Dir = Integer2(0,0);
        this.RBody.Velocity = Real3(0,0,0);
    }
}