class PlayerMovement : ZilchComponent
{
    [Dependency]
    var RBody : RigidBody = null;
    
    [Property]
    var StepSize : Real = 1;
    var Destination : Real3 = Real3();
    var Dir : Integer = 1;
    var Walking : Boolean = false;
    
    var Speed : Real3 = Real3(4,4,0);
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        var movement = Real3();
        if(!this.Walking)
        {
            if(Zero.Keyboard.KeyIsDown(Keys.W) || Zero.Keyboard.KeyIsDown(Keys.Up))
            {
                movement += Real3(0,1,0);
                this.Destination = this.Owner.Transform.Translation + Real3(0,this.StepSize,0);
                this.Walking = true;
            }
            if(Zero.Keyboard.KeyIsDown(Keys.S) || Zero.Keyboard.KeyIsDown(Keys.Down))
            {
                movement += Real3(0,-1,0);
                this.Destination = this.Owner.Transform.Translation + Real3(0,-this.StepSize,0);
                this.Walking = true;
            }
            if(Zero.Keyboard.KeyIsDown(Keys.A) || Zero.Keyboard.KeyIsDown(Keys.Left))
            {
                movement += Real3(-1,0,0);
                this.Destination = this.Owner.Transform.Translation + Real3(this.StepSize,0,0);
                this.Walking = true;
            }
            if(Zero.Keyboard.KeyIsDown(Keys.D) || Zero.Keyboard.KeyIsDown(Keys.Right))
            {
                movement += Real3(1,0,0);
                this.Destination = this.Owner.Transform.Translation + Real3(-this.StepSize,0,0);
                this.Walking = true;
            }
        }
        /*
        switch (this.Dir)
        {
            case Dir.Up :
                if(this.Owner.Transform.Translation.Y > this.Destination.Y)
                {
                    this.Walking = false;
                    this.Owner.Transform.Translation = this.Destination;
                }
        }
        */
        this.RBody.Velocity = movement * this.Speed;
    }
}
enum Dir {Up, Right, Down, Left}
