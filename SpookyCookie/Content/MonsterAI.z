// Authors: Stuart Strom, Arthur Bouvier
// All content Â© 2017 DigiPen (USA) Corporation, all rights reserved.
class MonsterAI : ZilchComponent
{
    var Target : Cog = null;
    var Beam : Cog = null;
    var Sense : Cog = null;
    [Property]
    var ChaseSpeed: Real;
    
    var ArrayIndex : Integer; //bobbbbobbobobbob
    
    var CreatePoof : Boolean = false;
    
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate); //bob is hungry
        Zero.Connect(this.Owner, Events.CollisionStarted, this.OnCollisionStarted);
        this.Target = this.Space.FindObjectByName("Player"); //bob
        this.Sense = this.Space.FindObjectByName("Sense");
        //this.Beam = this.Space.FindObjectByName("Beam");
    }
    function OnCollisionStarted(event : CollisionEvent)
    {
        if(event.OtherObject.Name == "Beam")
        {
            this.Destroy();
        }
        if(event.OtherObject.Name == "CreatedSpace" && event.OtherObject.SafeSpaceDestroy.SpaceActive == true)
        {
            this.Destroy();
        }
    }
    function OnLogicUpdate(event : UpdateEvent)
    {
        var movement = this.Target.Transform.Translation - this.Owner.Transform.Translation; //sad eggos
        movement /= Math.Sqrt(movement.X*movement.X+movement.Y*movement.Y); //food food food food food
        
        if(movement.X < 0)
        {
            this.Owner.Sprite.FlipX = true;
        }
        else
        {
            this.Owner.Sprite.FlipX = false; //ari's hungry
        }
        this.Owner.RigidBody.Velocity = movement * Real3(this.ChaseSpeed, this.ChaseSpeed, 0); //i want eggos
        
        /*
        if (this.Beam != null) {
            var beamPos = this.Beam.Transform.Translation + this.Beam.Parent.Transform.Translation;
            var beamScl = this.Beam.Transform.Scale;
            var tilePos = this.Owner.Transform.Translation;
            var inBeam = tilePos.X > beamPos.X-beamScl.X/2 && tilePos.X < beamPos.X+beamScl.X/2 &&
                         tilePos.Y > beamPos.Y-beamScl.Y/2 && tilePos.Y < beamPos.Y+beamScl.Y/2;
            if (inBeam)
                this.Destroy();
        }
        */
    }
    
    function Destroy()
    {
        if(this.CreatePoof)
            this.Space.CreateAtPosition(Archetype.GhostDeath, this.Owner.Transform.Translation);
        //this.Sense.Sense.RemoveGhost(this.Owner);
        this.Owner.Destroy();
    }
}
