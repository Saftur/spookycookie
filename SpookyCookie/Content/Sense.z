class Sense : ZilchComponent
{
    [Dependency]
    var Dad : FollowObject = null;
    
    var Ghosts : Array[Cog] = Array[Cog]();
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        Zero.Connect(this.Owner, Events.CollisionStarted, this.OnCollisionStarted);
        Zero.Connect(this.Owner, Events.CollisionEnded, this.OnCollisionEnded);
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        var i = 0;
        //Console.WriteLine("`this.Ghosts.Capacity`");
        while(i < this.Ghosts.Count)
        {
            var dist = Math.Distance(this.Owner.Transform.Translation.XY, this.Ghosts[i].Transform.Translation.XY);
            this.Dad.ObjectToFollow.Cog.FearManager.FearBar.Bar.Increase(0.1*event.Dt/dist);
            i += 1;
        }
    }
    function OnCollisionStarted(event : CollisionEvent)
    {
        if(event.OtherObject.MonsterAI != null)
        {
            this.Ghosts.Add(event.OtherObject);
            event.OtherObject.MonsterAI.ArrayIndex = this.Ghosts.Count - 1;
            Console.WriteLine("Added `this.Ghosts.Count` `event.OtherObject.Name` `event.OtherObject.MonsterAI.ArrayIndex`");
        }
    }
    function OnCollisionEnded(event : CollisionEvent)
    {
        if(event.OtherObject.MonsterAI != null)
        {
            if(event.OtherObject.MonsterAI.ArrayIndex < this.Ghosts.Count)
            {
                Console.WriteLine("`this.Ghosts.Count` `event.OtherObject.MonsterAI.ArrayIndex`");
                this.Ghosts.RemoveAt(event.OtherObject.MonsterAI.ArrayIndex);
            }
            var i = 0;
            while(i < this.Ghosts.Count)
            {
                this.Ghosts[i].MonsterAI.ArrayIndex -= 1;
                if(this.Ghosts[i].MonsterAI.ArrayIndex < 0)
                this.Ghosts[i].MonsterAI.ArrayIndex = 0;
                Console.WriteLine("Removed `this.Ghosts.Count` `event.OtherObject.Name` `event.OtherObject.MonsterAI.ArrayIndex`");
                i += 1;
            }
        }
    }
}
