// Authors: Charles duMars
// All content Â© 2017 DigiPen (USA) Corporation, all rights reserved.
class Sense : ZilchComponent
{
    [Dependency]
    var Dad : FollowObject = null;
    
    var Camera : Cog = null;
    var Ghosts : Array[Cog] = Array[Cog]();
    var ScareRange : Real = 3;
    var DebugNum : Integer = 0;
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        Zero.Connect(this.Owner, Events.CollisionStarted, this.OnCollisionStarted);
        Zero.Connect(this.Owner, Events.CollisionEnded, this.OnCollisionEnded);
        this.Camera = this.Space.FindObjectByName("Camera");
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        if(this.Dad.ObjectToFollow.Cog.FearManager.Spooked)
        {
            this.Dad.ObjectToFollow.Cog.FearManager.FearBar.Shake.StartShake = true;
            return;
        }
        var i = 0;
        var shake = false;
        while(i < this.Ghosts.Count)
        {
            var trail = this.Ghosts[i].FindChildByName("GhostTrail");
            var dist = Math.Distance(this.Owner.Transform.Translation.XY, this.Ghosts[i].Transform.Translation.XY);
            
            //Console.WriteLine("`dist` `event.Dt`");
            
            if(dist <= this.ScareRange && dist >= (this.ScareRange - 0.1))
            {
                this.Ghosts[i].Sprite.Color = Real4(this.Ghosts[i].Sprite.Color.XYZ, (this.ScareRange-dist)*(1/0.1));
                trail.SpriteParticleSystem.Tint = Real4(trail.SpriteParticleSystem.Tint.XYZ, (this.ScareRange-dist)*(1/0.1));
                this.Dad.ObjectToFollow.Cog.FearManager.Spook(event.Dt/(dist*3), false);
            }
            else if(dist <= (this.ScareRange - 0.1))
            {
                this.Ghosts[i].Sprite.Color = Real4(this.Ghosts[i].Sprite.Color.XYZ, 1);
                trail.SpriteParticleSystem.Tint = Real4(trail.SpriteParticleSystem.Tint.XYZ, 1);
                this.Dad.ObjectToFollow.Cog.FearManager.Spook(event.Dt/(dist*2), false);
            }
            else
            {
                this.Ghosts[i].Sprite.Color = Real4(this.Ghosts[i].Sprite.Color.XYZ, 0);
                trail.SpriteParticleSystem.Tint = Real4(trail.SpriteParticleSystem.Tint.XYZ, 0);
                this.Dad.ObjectToFollow.Cog.FearManager.Spook(event.Dt/(dist*10), false);
            }
            
            if(dist <= this.ScareRange)
            {
                if(!shake)
                    shake = true;
                this.Ghosts[i].MonsterAI.CreatePoof = true;
            }
            else
            {
                this.Ghosts[i].MonsterAI.CreatePoof = false;
            }
            i += 1;
        }
        this.Camera.ScreenShake.StartShake = shake;
        this.Dad.ObjectToFollow.Cog.FearManager.FearBar.Shake.StartShake = shake;
    }
    function OnCollisionStarted(event : CollisionEvent)
    {
        //Console.WriteLine("`event.OtherObject.Name`");
        if(event.OtherObject.MonsterAI != null)
        {
            this.AddGhost(event.OtherObject);
        }
    }
    function OnCollisionEnded(event : CollisionEvent)
    {
        if (event.OtherObject.MonsterAI != null)
        {
            this.RemoveGhost(event.OtherObject);
        }
    }
    function AddGhost(ghost : Cog)
    {
        var i = 0;
        while(i < this.Ghosts.Count)
        {
            if(this.Ghosts[i] == ghost)
                return;
            i += 1;
        }
        this.Ghosts.Add(ghost);
        ghost.MonsterAI.ArrayIndex = this.Ghosts.Count - 1;
        Console.WriteLine("`this.DebugNum` Added `this.Ghosts.Count` `ghost.Name` `ghost.MonsterAI.ArrayIndex`");
        this.DebugNum += 1;
    }
    function RemoveGhost(ghost : Cog)
    {
        var i = ghost.MonsterAI.ArrayIndex;
        if(i < this.Ghosts.Count)
        {
            Console.WriteLine("`this.DebugNum` Removed `this.Ghosts.Count` `ghost.Name` `ghost.MonsterAI.ArrayIndex`");
            this.Ghosts.RemoveAt(ghost.MonsterAI.ArrayIndex);
            while(i < this.Ghosts.Count)
            {
                this.Ghosts[i].MonsterAI.ArrayIndex -= 1;
                Console.WriteLine("i:`i` Count:`this.Ghosts.Count` index:`this.Ghosts[i].MonsterAI.ArrayIndex` `this.Ghosts[i].Name`");
                i += 1;
            }
        }
    }
}
