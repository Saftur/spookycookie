class Object : ZilchComponent
{
    [Property]
    var DistanceSpawn : Real;
    [Property]
    var TargetPath : CogPath;
    var Target : Cog;
    [Property]
    var DetectDistance : Real;
    [Property]
    var RespawnTime : Real;
    
    var HasSpawned : Boolean;
    var Ghost : Cog = null;
    
    var Time : Real;
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        if(this.TargetPath != null)
            this.Target = this.TargetPath.Cog;
        
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        var dist = (this.Target.Transform.Translation.X - this.Owner.Transform.Translation.X)^2 + (this.Target.Transform.Translation.Y - this.Owner.Transform.Translation.Y);
        if(this.Time > 0)
        {
            this.Time -= event.Dt;
            if (this.Time <= 0)
                this.Time = 0;
            else
                return;
        }
        if(this.HasSpawned && this.Ghost == null)
        {
            this.HasSpawned = false;
            this.Time = this.RespawnTime;
            return;
        }
        if(dist < this.DetectDistance && !this.HasSpawned)
        {
            this.Ghost = this.Space.CreateAtPosition(Archetype.Ghost,this.Owner.Transform.Translation);
            this.Ghost.MonsterAI.Target = this.Target;
            this.HasSpawned = true;
        }
    }
}
